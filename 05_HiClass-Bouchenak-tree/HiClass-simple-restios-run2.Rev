###############################################################################################
#
# HiClass for South African Restios
#
#
# authors: Jenna McCullough and Rosana Zenil-Ferguson
# last modified: 2/17/25
# this model allows for hidden cladogenesis, hidden anagenesis, simplified model where some hidden transitions in anagenesis
# and cladogenesis are equal (only for movement between A's and B's)
#########################################################################################################
#######################
# Reading in the Data #
#######################

NUM_STATES = 4
#number of total species in clade
num_species = 340

### Read in the data

observed_phylogeny <- readTrees("MCC_AFRICANRESTIOS.tre")[1] # fill in
data <- readCharacterDataDelimited("Elevation_322spp.tsv",stateLabels=2,type="NaturalNumbers",delimiter="\t",header=FALSE)
# fill in
taxa <- observed_phylogeny.taxa()
data_exp <- data.expandCharacters(2)


# after expanding the data, it looks like this
# 0A = in rev code, this is 1
# 1A = in rev code, this is 2
# 0B = in rev code, this is 3
# 1B = in rev code, this is 4

# set my move index
moves = VectorMoves()
monitors = VectorMonitors()



####################
# Create the extinction rates #
####################

### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates

H = 0.587405
rate_mean <- ln( ln(num_species/2.0) / observed_phylogeny.rootAge() )
rate_sd <- 2*H

# set up extinction rates
extinction_rates[1] ~ dnLognormal(rate_mean, rate_sd) # extinction for 0A
extinction_rates[2] ~ dnLognormal(rate_mean, rate_sd) # extinction for 1A
extinction_rates[3] ~ dnLognormal(rate_mean, rate_sd) # extinction for 0B
extinction_rates[4] ~ dnLognormal(rate_mean, rate_sd) # extinction for 1B 

# add MCMC moves for each extinction rate
moves.append(mvSlide( extinction_rates[1], weight=2 ))
moves.append(mvSlide( extinction_rates[2], weight=2 ))
moves.append(mvSlide( extinction_rates[3], weight=2 ))
moves.append(mvSlide( extinction_rates[4], weight=2 ))

#########################################################
# Set up the anagenetic transition rate matrix for observed states #
#########################################################
## I defined very loosely my gamma priors for rates in the Q-mat
shape_pr := 0.5
#rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
 rate_pr := observed_phylogeny.treeLength()/5

#these are the rates for anagenetic transitions
anagenetic_0Ato1A ~ dnGamma(shape_pr, rate_pr) #transition between 0A to 1A
anagenetic_1Ato0A ~ dnGamma(shape_pr, rate_pr) #transition between 1A to 0A
anagenetic_0Bto1B ~ dnGamma(shape_pr, rate_pr) #transition between 0B to 1B
anagenetic_1Bto0B ~ dnGamma(shape_pr, rate_pr) #transition between 1B to 0B

#adding MCMC moves for each rate
moves.append(mvSlide(anagenetic_0Ato1A, weight=2 ))
moves.append(mvSlide(anagenetic_1Ato0A, weight=2 ))
moves.append(mvSlide(anagenetic_0Bto1B, weight=2 ))
moves.append(mvSlide(anagenetic_1Bto0B, weight=2 ))


#these are the rates for anagenetic transitions between hidden states (A to B equal, B to A equal)
anagenetic_0Ato0B ~ dnGamma(shape_pr, rate_pr) #transition between 0A to 1A
anagenetic_1Ato1B := anagenetic_0Ato0B
anagenetic_0Bto0A ~ dnGamma(shape_pr, rate_pr) #transition between 0B to 1B
anagenetic_1Bto1A := anagenetic_0Bto0A

#adding MCMC moves for each rate
moves.append(mvSlide(anagenetic_0Ato0B, weight=2 ))
moves.append(mvSlide(anagenetic_0Bto0A, weight=2 ))


###################################################################################
# Create and populate the rate matrix for the combined observed and hidden states #
###################################################################################

# The anagenetic transitions will be stored in a
# instantaneous rate matrix.
# initalizing all rates to 0.0:
for (i in 1:4) {
    for (j in 1:4) {
        r[i][j] <- 0.0
    }
}

# Now we can populate non-zero rates into the anagenetic transition rate matrix:

r[1][2] := anagenetic_0Ato1A
r[2][1] := anagenetic_1Ato0A
r[3][4] := anagenetic_0Bto1B
r[4][3] := anagenetic_1Bto0B

# these are the transitions between A and B states for all the states

r[1][3] :=  anagenetic_0Ato0B  # q(0A) -> q(0B)
r[3][1] :=  anagenetic_0Bto0A  # q(0B) -> q(0A)
r[2][4] :=  anagenetic_1Ato1B  # q(1A) -> q(1B)
r[4][2] :=  anagenetic_1Bto1A  # q(1B) -> q(1A)

# Now we pass our vector of vectors into the fnFreeK function to create
# the instaneous rate matrix.
ana_rate_matrix := fnFreeK(r, rescaled=false)


##################################################
# Set up the cladogenetic speciation rate matrix #
##################################################

# character states 
# 0A = Rev code this is 1 = for cladogenetic events only this is 0
# 1A = Rev code this is 2 = for cladogenetic events only this is 1
# 0B = Rev code this is 3 = for cladogenetic events only this is 2
# 1B = Rev code this is 4 = for cladogenetic events only this is 3

# Here we need to define each cladogenetic event type in the form
# [ancestor_state, daughter1_state, daughter2_state]
# and assign each cladogenetic event type a corresponding
# speciation rate.

## assign speciation rates. We are allowing for all the types of cladogenetic events
# to have their own rate because we want to know if the trait of interest evolves 
# in different ways 

##Create vector speciation rates

speciation_rates = rep(0,20)


# 1. Cladogenesis from regular HiSSE 
# this is when there is no state change, 0A -> 0A,0A or 1B -> 1B,1B)

cladogenesis_0Ato0A0A ~ dnLognormal(rate_mean, rate_sd) # make the rate
moves.append(mvSlide(cladogenesis_0Ato0A0A, weight=2 )) # add to monitors
clado_events[1]  =  [0, 0, 0] # 0A -> 0A, 0A # specify the cladogenetic event
speciation_rates[1] := cladogenesis_0Ato0A0A #Removed the division because not two events

cladogenesis_1Ato1A1A~ dnLognormal(rate_mean, rate_sd)
moves.append(mvSlide(cladogenesis_1Ato1A1A, weight=2 ))
clado_events[2]  =  [1, 1, 1] # 1A -> 1A, 1A
speciation_rates[2] := cladogenesis_1Ato1A1A #Removed the division because not two events

cladogenesis_0Bto0B0B ~ dnLognormal(rate_mean, rate_sd)
moves.append(mvSlide( cladogenesis_0Bto0B0B , weight=2 ))
clado_events[11]  =  [2, 2, 2] # 0B -> 0B, 0B
speciation_rates[11] := cladogenesis_0Bto0B0B #Removed the division because not two events

cladogenesis_1Bto1B1B  ~ dnLognormal(rate_mean, rate_sd)
moves.append(mvSlide(cladogenesis_1Bto1B1B, weight=2 ))
clado_events[12]  =  [3, 3, 3] # 1B -> 1B, 1B
speciation_rates[12] := cladogenesis_1Bto1B1B #Removed the division because not two events


# 2.  speciation where there is a state change but NOT BETWEEN HIDDEN states
# this is like 0A -> 0A, 1A or 1B –> 1B, 0B  (making equal in A and B)

# speciation for 0A with a state change 
cladogenesis_0Ato0A1A ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide( cladogenesis_0Ato0A1A, weight=2 ))
clado_events[3] = [0, 0, 1]  # 0A -> 0A, 1A
clado_events[4] = [0, 1, 0]  # 0A -> 1A, 0A
speciation_rates[3] := cladogenesis_0Ato0A1A /2 #(s_0A rate)
speciation_rates[4] := cladogenesis_0Ato0A1A /2 #(s_0A rate)

# speciation for 1A   with a state change
cladogenesis_1Ato1A0A ~ dnLognormal(rate_mean, rate_sd) 
moves.append(mvSlide(cladogenesis_1Ato1A0A, weight=2 ))
clado_events[5] = [1, 1, 0]  # 1A -> 1A, 0A
clado_events[6] = [1, 0, 1]  # 1A -> 0A, 1A
speciation_rates[5] := cladogenesis_1Ato1A0A/2 # (s_1A rate)
speciation_rates[6] := cladogenesis_1Ato1A0A/2 # (s_1A rate)

# speciation for 0B   with a state change
cladogenesis_0Bto0B1B ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide( cladogenesis_0Bto0B1B, weight=2 ))
clado_events[13] = [2, 2, 3]  # 0B -> 0B, 1B
clado_events[14] = [2, 3, 2]  # 0B -> 1B, 0B
speciation_rates[13] := cladogenesis_0Bto0B1B/2  #(s_0B rate)
speciation_rates[14] := cladogenesis_0Bto0B1B/2 # (s_0B rate)

# speciation for 1B   with a state change
cladogenesis_1Bto1B0B  ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide( cladogenesis_1Bto1B0B , weight=2 ))
clado_events[15] = [3, 3, 2]  # 1B -> 1B, 0B
clado_events[16] = [3, 2, 3]  # 1B -> 0B, 1B
speciation_rates[15] := cladogenesis_1Bto1B0B/2  # (s_1B rate)
speciation_rates[16] := cladogenesis_1Bto1B0B/2  # (s_1B rate)


#  3. cladogenetic events occur between hidden states but NOT the trait 
# this is like 0A -> 0A, 0B or 1B –> 1B, 1A  

# speciation for 0A between hidden states 
cladogenesis_0Ato0A0B ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide(cladogenesis_0Ato0A0B, weight=2 ))
clado_events[7]  = [0, 0, 2] # 0A -> 0A, 0B
clado_events[8]  = [0, 2, 0] # 0A -> 0B, 0A
speciation_rates[7] := cladogenesis_0Ato0A0B/2  #(s_0A rate)
speciation_rates[8] := cladogenesis_0Ato0A0B/2 # (s_0A rate)

# speciation for 1A between hidden states 
cladogenesis_1Ato1A1B ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide(cladogenesis_1Ato1A1B, weight=2 ))
clado_events[9]  = [1, 1, 3] # 1A -> 1A, 1B
clado_events[10]  = [1, 3, 1] # 1A -> 1B, 1A 
speciation_rates[9] :=  cladogenesis_1Ato1A1B/2 # (s_1A rate)
speciation_rates[10] := cladogenesis_1Ato1A1B/2 # (s_1A rate)

# speciation for 0B between hidden states 
cladogenesis_0Bto0A0B ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide( cladogenesis_0Bto0A0B , weight=2 ))
clado_events[17]  = [2, 0, 2] # 0B -> 0A, 0B
clado_events[18] = [2, 2, 0] # 0B -> 0B, 0A
speciation_rates[17] := cladogenesis_0Bto0A0B /2  #(s_0B rate)
speciation_rates[18] := cladogenesis_0Bto0A0B /2 # (s_0B rate)

# speciation for 1B between hidden states 
cladogenesis_1Bto1A1B ~ dnLognormal(rate_mean, rate_sd) #
moves.append(mvSlide(cladogenesis_1Bto1A1B, weight=2 ))
clado_events[19] = [3, 1, 3] # 1B -> 1A, 1B
clado_events[20] = [3, 3, 1] # 1B -> 1B, 1A 
speciation_rates[19] := cladogenesis_1Bto1A1B/2 # (s_1B rate)
speciation_rates[20] := cladogenesis_1Bto1A1B/2 # (s_1B rate)


# Now let's create a deterministic variable to monitor the overall speciation rate
total_speciation := sum(speciation_rates)

# The cladogenetic speciation rate
# matrix from the cladogenetic event types and the speciation rates
clado_matrix := fnCladogeneticSpeciationRateMatrix(clado_events, speciation_rates, 4)

# Print clado_matrix
clado_matrix

########################################################################
# Set up the cladogenetic character state dependent birth death process #
#########################################################################

#not fixing the root 
root_frequencies ~ dnDirichlet( rep(1,NUM_STATES) )
moves.append(mvDirichletSimplex(root_frequencies,tune=true,weight=2))


### If we were going to fix the root: 
# For simplicity we will fix the root frequences to be equal except for the null state
# which has probability of 0.
#root_frequencies <-[0.5,0,0.5,0]
# this is fixed because we believe that the root is trait 0 (diploid)

### I did not add any sampling of species but it is posible by setting this rho parameter
### rho is the probability of sampling species at the present
### fix this

rho <- observed_phylogeny.ntips()/num_species 


####################################################################
# Building the ClaHiSSE+Hidden Cladogenesis Model (HiClass) as discrete character model+ BD process#
###################################################################

### Here is where I tie speciation, extinction, and Q using a Birth-Death with categories
ClaHiSSEhiClass ~ dnCDBDP( rootAge        = observed_phylogeny.rootAge(),
                  cladoEventMap   = clado_matrix,
                  extinctionRates = extinction_rates,
                  Q               = ana_rate_matrix,
                  delta           = 1.0,
                  pi              = root_frequencies,
                  rho             = rho,
                  condition       = "time")



### clamp the model with the "observed" tree
ClaHiSSEhiClass.clamp( observed_phylogeny )
ClaHiSSEhiClass.clampCharData( data_exp )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(ana_rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors.append(mnModel(filename="output/HiClass_restios_simple_run_2.log", printgen=1))
monitors.append(mnScreen(printgen=10, cladogenesis_0Ato0A1A, extinction_rates))


################
# The Analysis #
################

### workspace mcmc
#mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random")
# the first time it has 2 but then i end after it hits the first checkpoint so both runs
# can be restarted on their own terminal windows 
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals 20% of the sample
#mymcmc.burnin(generations=2000,tuningInterval=100)

# when i need to restart it, uncomment
mymcmc.initializeFromCheckpoint("output/HiClass_restios_simple.checkpoint_run_2.txt") #comment out for first run


### run the MCMC
mymcmc.run(generations=250000, checkpointFile="output/HiClass_restios_simple.checkpoint_run_2.txt", checkpointInterval=100)

##############################
# Summarize ancestral states #
##############################


#anc_states = readAncestralStateTrace("/home/eeg/shared/twostatesse/bissesi/output/anc_states_BiSSE_selfincomp250K.log")
#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="/home/eeg/shared/twostatesse/bissesi/output/anc_states_summaryBiSSEselfincomp250K.tree", burnin=0, summary_statistic="MAP", site=0)

q()


