# speciation for 1B   with a state change
sympatry_speciation1B ~ dnLognormal(rate_mean, rate_sd) # 
moves[++mvi] = mvSlide( sympatry_speciation1B, weight=2 )
clado_events[15] = [3, 3, 2]  # 1B -> 1B, 0B
clado_events[16] = [3, 2, 3]  # 1B -> 0B, 1B
speciation_rates[15] := sympatry_speciation1B/2  # (s_1B rate)
speciation_rates[16] := sympatry_speciation1B/2  # (s_1B rate)
#  3. cladogenetic events occur between hidden states but NOT the trait 
# this is like 0A -> 0A, 0B or 1B â€“> 1B, 1A  
# speciation for 0A between hidden states 
hidden_speciation0A ~ dnLognormal(rate_mean, rate_sd) # 
moves[++mvi] = mvSlide( hidden_speciation0A, weight=2 )
clado_events[7]  = [0, 0, 2] # 0A -> 0A, 0B
clado_events[8]  = [0, 2, 0] # 0A -> 0B, 0A
speciation_rates[7] := hidden_speciation0A/2  #(s_0A rate)
speciation_rates[8] := hidden_speciation0A/2 # (s_0A rate)
# speciation for 1A between hidden states 
hidden_speciation1A ~ dnLognormal(rate_mean, rate_sd) # 
moves[++mvi] = mvSlide( hidden_speciation1A, weight=2 )
clado_events[9]  = [1, 1, 3] # 1A -> 1A, 1B
clado_events[10]  = [1, 3, 1] # 1A -> 1B, 1A 
speciation_rates[9] :=  hidden_speciation1A/2 # (s_1A rate)
speciation_rates[10] := hidden_speciation1A/2 # (s_1A rate)
# speciation for 0B between hidden states 
hidden_speciation0B ~ dnLognormal(rate_mean, rate_sd) # 
moves[++mvi] = mvSlide( hidden_speciation0B, weight=2 )
clado_events[17]  = [2, 0, 2] # 0B -> 0A, 0B
clado_events[18] = [2, 2, 0] # 0B -> 0B, 0A
speciation_rates[17] := hidden_speciation0B/2  #(s_0B rate)
speciation_rates[18] := hidden_speciation0B/2 # (s_0B rate)
# speciation for 1B between hidden states 
hidden_speciation1B ~ dnLognormal(rate_mean, rate_sd) # 
moves[++mvi] = mvSlide( hidden_speciation1B, weight=2 )
clado_events[19] = [3, 1, 3] # 1B -> 1A, 1B
clado_events[20] = [3, 3, 1] # 1B -> 1B, 1A 
speciation_rates[19] := hidden_speciation1B/2 # (s_1B rate)
speciation_rates[20] := hidden_speciation1B/2 # (s_1B rate)
# Now let's create a deterministic variable to monitor the overall speciation rate
total_speciation := sum(speciation_rates)
# The cladogenetic speciation rate
# matrix from the cladogenetic event types and the speciation rates
clado_matrix := fnCladogeneticSpeciationRateMatrix(clado_events, speciation_rates, 4)
# Print clado_matrix
clado_matrix
########################################################################
# Set up the cladogenetic character state dependent birth death process #
#########################################################################
# For simplicity we will fix the root frequences to be equal except for the null state
# which has probability of 0.
root_frequencies <-[0.5,0,0.5,0]
# this is fixed because we believe that the root is trait 0 (diploid)
### I did not add any sampling of species but it is posible by setting this rho parameter
### rho is the probability of sampling species at the present
### fix this
rho <- observed_phylogeny.ntips()/num_species # we sampled 651 of the 3000 species 
#rho <- 651/3000 
####################################################################
# Building the ClaHiSSE+HiClad Model as discrete character model+ BD process#
###################################################################
### Here is where I tie speciation, extinction, and Q using a Birth-Death with categories
ClaHiSSEhiClad ~ dnCDBDP( rootAge        = observed_phylogeny.rootAge(),
                  cladoEventMap   = clado_matrix,
                  extinctionRates = extinction_rates,
                  Q               = ana_rate_matrix,
                  delta           = 1.0,
                  pi              = root_frequencies,
                  rho             = rho,
                  condition       = "time" )
### clamp the model with the "observed" tree
ClaHiSSEhiClad.clamp( observed_phylogeny )
ClaHiSSEhiClad.clampCharData( data_exp )
#############
# The Model #
#############
### workspace model wrapper ###
mymodel = model(sympatry_speciation1A)
### set up the monitors that will output parameter values to file and screen
#monitors[++mni] = mnModel(filename="output/bisse.log", printgen=1)
monitors[++mni] = mnModel(filename="output/ClaHiSSEhiClad_freeCladoRates_run1.log", printgen=1)
#monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=1000, withTips=true, withStartStates=false, filename="output/anc_states_bisse_ssv1.log")
monitors[++mni] = mnScreen(printgen=10, anagenetic_transition_12, sympatry_speciation1A, extinction_rates)
################
# The Analysis #
################
### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random")
### pre-burnin to tune the proposals 20% of the sample
#mymcmc.burnin(generations=2000,tuningInterval=100)
# when i need to restart it, uncomment
#mymcmc.initializeFromCheckpoint(filename="output/ClaHiSSEhiClad_freeCladoRates_run1.state") #comment out for first run
### run the MCMC
mymcmc.run(generations=250000, checkpointFile="output/ClaHiSSEhiClad_freeCladoRates_chekpoint.txt", checkpointInterval=500)
q()
?initializeFromCheckpoint
?initializeFromCheckpoint()
mymcmc.initializeFromCheckpoint(filename="/output-test/ClaHiSSEhiClad_freeCladoRates_newRb_attempt2.checkpoint_run_1.txt") #comment out for first ru
mymcmc.initializeFromCheckpoint("/output-test/ClaHiSSEhiClad_freeCladoRates_newRb_attempt2.checkpoint_run_1.txt") #comment out for first ru
mymcmc.initializeFromCheckpoint("output-test/ClaHiSSEhiClad_freeCladoRates_newRb_attempt2.checkpoint_run_1.txt") #comment out for first ru
q()
